TranslationUnitDecl 0x5e33f9cd5918 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5e33f9cd6180 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5e33f9cd5ee0 '__int128'
|-TypedefDecl 0x5e33f9cd61f0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5e33f9cd5f00 'unsigned __int128'
|-TypedefDecl 0x5e33f9cd6568 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x5e33f9cd62e0 '__NSConstantString_tag'
|   `-CXXRecord 0x5e33f9cd6248 '__NSConstantString_tag'
|-TypedefDecl 0x5e33f9cd6600 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5e33f9cd65c0 'char *'
|   `-BuiltinType 0x5e33f9cd59c0 'char'
|-TypedefDecl 0x5e33f9d1b868 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x5e33f9d1b810 '__va_list_tag[1]' 1 
|   `-RecordType 0x5e33f9cd66f0 '__va_list_tag'
|     `-CXXRecord 0x5e33f9cd6658 '__va_list_tag'
|-CXXRecordDecl 0x5e33f9d1b8c0 </fridaAnlzAp/clang-var/test_in/typedef__lambda__demo__marcoType.cpp:1:1, col:13> col:7 referenced class User definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5e33f9d1b9d8 <col:1, col:7> col:7 implicit class User
| |-CXXConstructorDecl 0x5e33f9d1bd88 <col:7> col:7 implicit used constexpr User 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5e33f9d1c208 <col:7>
| |-CXXConstructorDecl 0x5e33f9d1be88 <col:7> col:7 implicit used constexpr User 'void (const User &) noexcept' inline default trivial
| | |-ParmVarDecl 0x5e33f9d1bf98 <col:7> col:7 'const User &'
| | `-CompoundStmt 0x5e33f9d3b2c0 <col:7>
| |-CXXConstructorDecl 0x5e33f9d1c048 <col:7> col:7 implicit constexpr User 'void (User &&)' inline default trivial noexcept-unevaluated 0x5e33f9d1c048
| | `-ParmVarDecl 0x5e33f9d1c158 <col:7> col:7 'User &&'
| `-CXXDestructorDecl 0x5e33f9d1c2a0 <col:7> col:7 implicit referenced ~User 'void () noexcept' inline default trivial
`-FunctionDecl 0x5e33f9d1bac8 <line:3:1, line:8:1> line:3:6 func_demo_ForEach 'void ()'
  `-CompoundStmt 0x5e33f9d3b410 <col:25, line:8:1>
    |-DeclStmt 0x5e33f9d1c380 <line:4:3, col:14>
    | `-VarDecl 0x5e33f9d1bd08 <col:3, col:13> col:8 used arr 'User[4]' callinit
    |   `-CXXConstructExpr 0x5e33f9d1c278 <col:8> 'User[4]' 'void () noexcept'
    `-CXXForRangeStmt 0x5e33f9d3b300 <line:5:3, line:7:3>
      |-<<<NULL>>>
      |-DeclStmt 0x5e33f9d1c780 <line:5:14>
      | `-VarDecl 0x5e33f9d1c4f0 <col:14> col:14 implicit used __range1 'User (&)[4]' cinit
      |   `-DeclRefExpr 0x5e33f9d1c398 <col:14> 'User[4]' lvalue Var 0x5e33f9d1bd08 'arr' 'User[4]'
      |-DeclStmt 0x5e33f9d3b130 <col:13>
      | `-VarDecl 0x5e33f9d3ae00 <col:13> col:13 implicit used __begin1 'User *':'User *' cinit
      |   `-ImplicitCastExpr 0x5e33f9d3b000 <col:13> 'User *' <ArrayToPointerDecay>
      |     `-DeclRefExpr 0x5e33f9d1c798 <col:13> 'User[4]' lvalue Var 0x5e33f9d1c4f0 '__range1' 'User (&)[4]'
      |-DeclStmt 0x5e33f9d3b148 <col:13>
      | `-VarDecl 0x5e33f9d3aea8 <col:13, col:14> col:13 implicit used __end1 'User *':'User *' cinit
      |   `-BinaryOperator 0x5e33f9d3b050 <col:13, col:14> 'User *' '+'
      |     |-ImplicitCastExpr 0x5e33f9d3b038 <col:13> 'User *' <ArrayToPointerDecay>
      |     | `-DeclRefExpr 0x5e33f9d1c7b8 <col:13> 'User[4]' lvalue Var 0x5e33f9d1c4f0 '__range1' 'User (&)[4]'
      |     `-IntegerLiteral 0x5e33f9d3b018 <col:14> 'long' 4
      |-BinaryOperator 0x5e33f9d3b1d0 <col:13> 'bool' '!='
      | |-ImplicitCastExpr 0x5e33f9d3b1a0 <col:13> 'User *':'User *' <LValueToRValue>
      | | `-DeclRefExpr 0x5e33f9d3b160 <col:13> 'User *':'User *' lvalue Var 0x5e33f9d3ae00 '__begin1' 'User *':'User *'
      | `-ImplicitCastExpr 0x5e33f9d3b1b8 <col:13> 'User *':'User *' <LValueToRValue>
      |   `-DeclRefExpr 0x5e33f9d3b180 <col:13> 'User *':'User *' lvalue Var 0x5e33f9d3aea8 '__end1' 'User *':'User *'
      |-UnaryOperator 0x5e33f9d3b210 <col:13> 'User *':'User *' lvalue prefix '++'
      | `-DeclRefExpr 0x5e33f9d3b1f0 <col:13> 'User *':'User *' lvalue Var 0x5e33f9d3ae00 '__begin1' 'User *':'User *'
      |-DeclStmt 0x5e33f9d1c430 <col:7, col:17>
      | `-VarDecl 0x5e33f9d1c3c8 <col:7, col:13> col:12 x 'User' cinit
      |   `-CXXConstructExpr 0x5e33f9d3b2d0 <col:13> 'User' 'void (const User &) noexcept'
      |     `-ImplicitCastExpr 0x5e33f9d3b278 <col:13> 'const User' lvalue <NoOp>
      |       `-UnaryOperator 0x5e33f9d3b260 <col:13> 'User' lvalue prefix '*' cannot overflow
      |         `-ImplicitCastExpr 0x5e33f9d3b248 <col:13> 'User *':'User *' <LValueToRValue>
      |           `-DeclRefExpr 0x5e33f9d3b228 <col:13> 'User *':'User *' lvalue Var 0x5e33f9d3ae00 '__begin1' 'User *':'User *'
      `-CompoundStmt 0x5e33f9d3b3f8 <col:18, line:7:3>
        `-DeclStmt 0x5e33f9d3b3e0 <line:6:5, col:12>
          `-VarDecl 0x5e33f9d3b378 <col:5, col:9> col:9 kkk 'int'
