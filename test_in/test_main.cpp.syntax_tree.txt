TranslationUnitDecl 0x5b5515b1a948 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x5b5515b1b1b0 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x5b5515b1af10 '__int128'
|-TypedefDecl 0x5b5515b1b220 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x5b5515b1af30 'unsigned __int128'
|-TypedefDecl 0x5b5515b1b598 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x5b5515b1b310 '__NSConstantString_tag'
|   `-CXXRecord 0x5b5515b1b278 '__NSConstantString_tag'
|-TypedefDecl 0x5b5515b1b630 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x5b5515b1b5f0 'char *'
|   `-BuiltinType 0x5b5515b1a9f0 'char'
|-TypedefDecl 0x5b5515b60c88 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x5b5515b60c30 '__va_list_tag[1]' 1 
|   `-RecordType 0x5b5515b1b720 '__va_list_tag'
|     `-CXXRecord 0x5b5515b1b688 '__va_list_tag'
|-TypedefDecl 0x5b5515b60cf8 </fridaAnlzAp/clang-var/test_in/test_main.cpp:3:1, col:16> col:16 DOUBLE_typedef 'double'
| `-BuiltinType 0x5b5515b1ab70 'double'
|-CXXRecordDecl 0x5b5515b60d50 <line:5:1, line:8:1> line:5:8 referenced struct Point definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x5b5515b60e68 <col:1, col:8> col:8 implicit struct Point
| |-FieldDecl 0x5b5515b60f10 <line:6:5, col:11> col:11 referenced x 'float'
| |-FieldDecl 0x5b5515b60f78 <line:7:5, col:12> col:12 referenced y 'double'
| |-CXXConstructorDecl 0x5b5515b80d58 <line:5:8> col:8 implicit used Point 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5b5515b83048 <col:8>
| |-CXXConstructorDecl 0x5b5515b80e58 <col:8> col:8 implicit constexpr Point 'void (const Point &)' inline default trivial noexcept-unevaluated 0x5b5515b80e58
| | `-ParmVarDecl 0x5b5515b82e08 <col:8> col:8 'const Point &'
| `-CXXConstructorDecl 0x5b5515b82eb8 <col:8> col:8 implicit constexpr Point 'void (Point &&)' inline default trivial noexcept-unevaluated 0x5b5515b82eb8
|   `-ParmVarDecl 0x5b5515b82fc8 <col:8> col:8 'Point &&'
|-CXXRecordDecl 0x5b5515b60fe0 <line:9:1, col:18> col:7 referenced class UserEntity definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x5b5515b610f8 <col:1, col:7> col:7 implicit class UserEntity
| |-CXXConstructorDecl 0x5b5515b80730 <col:7> col:7 implicit used constexpr UserEntity 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x5b5515b80b88 <col:7>
| |-CXXConstructorDecl 0x5b5515b80838 <col:7> col:7 implicit constexpr UserEntity 'void (const UserEntity &)' inline default trivial noexcept-unevaluated 0x5b5515b80838
| | `-ParmVarDecl 0x5b5515b80948 <col:7> col:7 'const UserEntity &'
| |-CXXConstructorDecl 0x5b5515b809f8 <col:7> col:7 implicit used constexpr UserEntity 'void (UserEntity &&) noexcept' inline default trivial
| | |-ParmVarDecl 0x5b5515b80b08 <col:7> col:7 'UserEntity &&'
| | `-CompoundStmt 0x5b5515b86500 <col:7>
| `-CXXDestructorDecl 0x5b5515b862a8 <col:7> col:7 implicit referenced ~UserEntity 'void () noexcept' inline default trivial
|-CXXRecordDecl 0x5b5515b611a0 <line:10:1, col:21> col:7 class ScoreRelation definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveConstructor exists simple trivial needs_implicit
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| `-CXXRecordDecl 0x5b5515b612b8 <col:1, col:7> col:7 implicit class ScoreRelation
|-CXXRecordDecl 0x5b5515b61360 <line:11:1, line:54:1> line:11:7 referenced class MyClass definition
| |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
| | |-DefaultConstructor exists non_trivial user_provided
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment
| | `-Destructor non_trivial user_declared
| |-CXXRecordDecl 0x5b5515b61478 <col:1, col:7> col:7 implicit referenced class MyClass
| |-AccessSpecDecl 0x5b5515b61508 <line:12:1, col:7> col:1 public
| |-VarDecl 0x5b5515b61548 <line:13:5, col:16> col:16 ZERO 'int' static
| |-AccessSpecDecl 0x5b5515b615b0 <line:14:1, col:7> col:1 public
| |-FieldDecl 0x5b5515b615f0 <line:15:5, col:12> col:12 m_d1 'double'
| |-FieldDecl 0x5b5515b61658 <line:16:5, col:9> col:9 m_n2 'int'
| |-CXXConstructorDecl 0x5b5515b61738 <line:18:5, col:16> col:5 used MyClass 'void ()' implicit-inline
| | `-CompoundStmt 0x5b5515b80260 <col:15, col:16>
| |-CXXConstructorDecl 0x5b5515b61948 <line:20:5, line:24:5> line:20:5 MyClass 'void (float, int)' implicit-inline
| | |-ParmVarDecl 0x5b5515b617f8 <col:13, col:19> col:19 used f1 'float'
| | |-ParmVarDecl 0x5b5515b61878 <col:23, col:27> col:27 used n1 'int'
| | |-CXXCtorInitializer Field 0x5b5515b615f0 'm_d1' 'double'
| | | `-ImplicitCastExpr 0x5b5515b802c8 <line:21:19> 'double' <FloatingCast>
| | |   `-ImplicitCastExpr 0x5b5515b802b0 <col:19> 'float' <LValueToRValue>
| | |     `-DeclRefExpr 0x5b5515b80270 <col:19> 'float' lvalue ParmVar 0x5b5515b617f8 'f1' 'float'
| | |-CXXCtorInitializer Field 0x5b5515b61658 'm_n2' 'int'
| | | `-ImplicitCastExpr 0x5b5515b80340 <col:28> 'int' <LValueToRValue>
| | |   `-DeclRefExpr 0x5b5515b80300 <col:28> 'int' lvalue ParmVar 0x5b5515b61878 'n1' 'int'
| | `-CompoundStmt 0x5b5515b804a8 <line:22:5, line:24:5>
| |   `-DeclStmt 0x5b5515b80490 <line:23:9, col:21>
| |     `-VarDecl 0x5b5515b80398 <col:9, col:19> col:14 c3 'char' cinit
| |       `-ImplicitCastExpr 0x5b5515b80478 <col:17, col:19> 'char' <IntegralCast>
| |         `-BinaryOperator 0x5b5515b80458 <col:17, col:19> 'int' '+'
| |           |-IntegerLiteral 0x5b5515b80400 <col:17> 'int' 1
| |           `-ImplicitCastExpr 0x5b5515b80440 <col:19> 'int' <LValueToRValue>
| |             `-DeclRefExpr 0x5b5515b80420 <col:19> 'int' lvalue ParmVar 0x5b5515b61878 'n1' 'int'
| |-CXXDestructorDecl 0x5b5515b61a58 <line:26:5, line:39:5> line:26:5 used ~MyClass 'void () noexcept' implicit-inline
| | `-CompoundStmt 0x5b5515b86140 <col:15, line:39:5>
| |   |-DeclStmt 0x5b5515b80688 <line:27:9, col:18>
| |   | |-VarDecl 0x5b5515b80500 <col:9, col:13> col:13 x 'int'
| |   | |-VarDecl 0x5b5515b80580 <col:9, col:15> col:15 y 'int'
| |   | `-VarDecl 0x5b5515b80600 <col:9, col:17> col:17 z 'int'
| |   |-DeclStmt 0x5b5515b80cb0 <line:28:9, col:30>
| |   | `-VarDecl 0x5b5515b806b0 <col:9, col:20> col:20 userEntity 'UserEntity' callinit
| |   |   `-CXXConstructExpr 0x5b5515b80c88 <col:20> 'UserEntity' 'void () noexcept'
| |   |-DeclStmt 0x5b5515b83180 <line:30:9, col:21>
| |   | `-VarDecl 0x5b5515b80cd8 <col:9, col:15> col:15 used point0 'Point' callinit
| |   |   `-CXXConstructExpr 0x5b5515b83158 <col:15> 'Point' 'void () noexcept'
| |   |-DeclStmt 0x5b5515b85fc8 <line:31:9, line:36:10>
| |   | `-VarDecl 0x5b5515b83210 <line:31:9, line:36:9> line:31:14 used fn_point '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)':'(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)' cinit
| |   |   `-ExprWithCleanups 0x5b5515b85fb0 <col:25, line:36:9> '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)':'(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)'
| |   |     `-CXXConstructExpr 0x5b5515b85f80 <line:31:25, line:36:9> '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)':'(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)' 'void ((lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25) &&) noexcept' elidable
| |   |       `-MaterializeTemporaryExpr 0x5b5515b85e08 <line:31:25, line:36:9> '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)' xvalue
| |   |         `-LambdaExpr 0x5b5515b85880 <line:31:25, line:36:9> '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)'
| |   |           |-CXXRecordDecl 0x5b5515b83378 <line:31:25> col:25 implicit class definition
| |   |           | |-DefinitionData lambda pass_in_registers empty standard_layout trivially_copyable can_const_default_init
| |   |           | | |-DefaultConstructor defaulted_is_constexpr
| |   |           | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| |   |           | | |-MoveConstructor exists simple trivial
| |   |           | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
| |   |           | | |-MoveAssignment
| |   |           | | `-Destructor simple irrelevant trivial
| |   |           | |-CXXMethodDecl 0x5b5515b834c0 <col:46, line:36:9> line:31:25 used operator() 'double (const Point &) const' inline
| |   |           | | |-ParmVarDecl 0x5b5515b83288 <col:28, col:41> col:41 used point 'const Point &'
| |   |           | | `-CompoundStmt 0x5b5515b83a30 <col:48, line:36:9>
| |   |           | |   `-IfStmt 0x5b5515b83a00 <line:32:13, line:35:24> has_else
| |   |           | |     |-BinaryOperator 0x5b5515b83660 <line:32:16, col:30> 'bool' '>'
| |   |           | |     | |-ImplicitCastExpr 0x5b5515b83648 <col:16, col:22> 'double' <FloatingCast>
| |   |           | |     | | `-ImplicitCastExpr 0x5b5515b83618 <col:16, col:22> 'float' <LValueToRValue>
| |   |           | |     | |   `-MemberExpr 0x5b5515b83598 <col:16, col:22> 'const float' lvalue .x 0x5b5515b60f10
| |   |           | |     | |     `-DeclRefExpr 0x5b5515b83578 <col:16> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |           | |     | `-ImplicitCastExpr 0x5b5515b83630 <col:24, col:30> 'double' <LValueToRValue>
| |   |           | |     |   `-MemberExpr 0x5b5515b835e8 <col:24, col:30> 'const double' lvalue .y 0x5b5515b60f78
| |   |           | |     |     `-DeclRefExpr 0x5b5515b835c8 <col:24> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |           | |     |-ReturnStmt 0x5b5515b83900 <line:33:17, col:38>
| |   |           | |     | `-BinaryOperator 0x5b5515b83768 <col:24, col:38> 'double' '+'
| |   |           | |     |   |-ImplicitCastExpr 0x5b5515b83750 <col:24, col:30> 'double' <FloatingCast>
| |   |           | |     |   | `-ImplicitCastExpr 0x5b5515b83720 <col:24, col:30> 'float' <LValueToRValue>
| |   |           | |     |   |   `-MemberExpr 0x5b5515b836a0 <col:24, col:30> 'const float' lvalue .x 0x5b5515b60f10
| |   |           | |     |   |     `-DeclRefExpr 0x5b5515b83680 <col:24> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |           | |     |   `-ImplicitCastExpr 0x5b5515b83738 <col:32, col:38> 'double' <LValueToRValue>
| |   |           | |     |     `-MemberExpr 0x5b5515b836f0 <col:32, col:38> 'const double' lvalue .y 0x5b5515b60f78
| |   |           | |     |       `-DeclRefExpr 0x5b5515b836d0 <col:32> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |           | |     `-ReturnStmt 0x5b5515b839f0 <line:35:17, col:24>
| |   |           | |       `-FloatingLiteral 0x5b5515b83910 <col:24> 'double' 1.000000e-01
| |   |           | |-CXXConversionDecl 0x5b5515b83cc0 <line:31:25, line:36:9> line:31:25 implicit operator double (*)(const Point &) 'double (*() const noexcept)(const Point &)' inline
| |   |           | |-CXXMethodDecl 0x5b5515b857c0 <col:25, line:36:9> line:31:25 implicit __invoke 'double (const Point &)' static inline
| |   |           | | `-ParmVarDecl 0x5b5515b83c58 <col:28, col:41> col:41 point 'const Point &'
| |   |           | |-CXXDestructorDecl 0x5b5515b858a8 <col:25> col:25 implicit referenced ~ 'void () noexcept' inline default trivial
| |   |           | |-CXXConstructorDecl 0x5b5515b85ac0 <col:25> col:25 implicit constexpr  'void (const (lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25) &)' inline default trivial noexcept-unevaluated 0x5b5515b85ac0
| |   |           | | `-ParmVarDecl 0x5b5515b85bd8 <col:25> col:25 'const (lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25) &'
| |   |           | `-CXXConstructorDecl 0x5b5515b85c78 <col:25> col:25 implicit used constexpr  'void ((lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25) &&) noexcept' inline default trivial
| |   |           |   |-ParmVarDecl 0x5b5515b85d88 <col:25> col:25 '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25) &&'
| |   |           |   `-CompoundStmt 0x5b5515b85f70 <col:25>
| |   |           `-CompoundStmt 0x5b5515b83a30 <col:48, line:36:9>
| |   |             `-IfStmt 0x5b5515b83a00 <line:32:13, line:35:24> has_else
| |   |               |-BinaryOperator 0x5b5515b83660 <line:32:16, col:30> 'bool' '>'
| |   |               | |-ImplicitCastExpr 0x5b5515b83648 <col:16, col:22> 'double' <FloatingCast>
| |   |               | | `-ImplicitCastExpr 0x5b5515b83618 <col:16, col:22> 'float' <LValueToRValue>
| |   |               | |   `-MemberExpr 0x5b5515b83598 <col:16, col:22> 'const float' lvalue .x 0x5b5515b60f10
| |   |               | |     `-DeclRefExpr 0x5b5515b83578 <col:16> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |               | `-ImplicitCastExpr 0x5b5515b83630 <col:24, col:30> 'double' <LValueToRValue>
| |   |               |   `-MemberExpr 0x5b5515b835e8 <col:24, col:30> 'const double' lvalue .y 0x5b5515b60f78
| |   |               |     `-DeclRefExpr 0x5b5515b835c8 <col:24> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |               |-ReturnStmt 0x5b5515b83900 <line:33:17, col:38>
| |   |               | `-BinaryOperator 0x5b5515b83768 <col:24, col:38> 'double' '+'
| |   |               |   |-ImplicitCastExpr 0x5b5515b83750 <col:24, col:30> 'double' <FloatingCast>
| |   |               |   | `-ImplicitCastExpr 0x5b5515b83720 <col:24, col:30> 'float' <LValueToRValue>
| |   |               |   |   `-MemberExpr 0x5b5515b836a0 <col:24, col:30> 'const float' lvalue .x 0x5b5515b60f10
| |   |               |   |     `-DeclRefExpr 0x5b5515b83680 <col:24> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |               |   `-ImplicitCastExpr 0x5b5515b83738 <col:32, col:38> 'double' <LValueToRValue>
| |   |               |     `-MemberExpr 0x5b5515b836f0 <col:32, col:38> 'const double' lvalue .y 0x5b5515b60f78
| |   |               |       `-DeclRefExpr 0x5b5515b836d0 <col:32> 'const Point' lvalue ParmVar 0x5b5515b83288 'point' 'const Point &'
| |   |               `-ReturnStmt 0x5b5515b839f0 <line:35:17, col:24>
| |   |                 `-FloatingLiteral 0x5b5515b83910 <col:24> 'double' 1.000000e-01
| |   `-CXXOperatorCallExpr 0x5b5515b86108 <line:38:9, col:24> 'double':'double' '()'
| |     |-ImplicitCastExpr 0x5b5515b86098 <col:17, col:24> 'double (*)(const Point &) const' <FunctionToPointerDecay>
| |     | `-DeclRefExpr 0x5b5515b86020 <col:17, col:24> 'double (const Point &) const' lvalue CXXMethod 0x5b5515b834c0 'operator()' 'double (const Point &) const'
| |     |-ImplicitCastExpr 0x5b5515b860d8 <col:9> 'const (lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)' lvalue <NoOp>
| |     | `-DeclRefExpr 0x5b5515b85fe0 <col:9> '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)':'(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)' lvalue Var 0x5b5515b83210 'fn_point' '(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)':'(lambda at /fridaAnlzAp/clang-var/test_in/test_main.cpp:31:25)'
| |     `-ImplicitCastExpr 0x5b5515b860f0 <col:18> 'const Point' lvalue <NoOp>
| |       `-DeclRefExpr 0x5b5515b86000 <col:18> 'Point' lvalue Var 0x5b5515b80cd8 'point0' 'Point'
| |-CXXMethodDecl 0x5b5515b80038 <line:41:5, line:44:5> line:41:10 voidDemo 'void (int, short)' implicit-inline
| | |-ParmVarDecl 0x5b5515b61b58 <col:19, col:23> col:23 cnt 'int'
| | |-ParmVarDecl 0x5b5515b7ff60 <col:28, col:34> col:34 chr 'short'
| | `-CompoundStmt 0x5b5515b876f8 <col:38, line:44:5>
| |   |-DeclStmt 0x5b5515b86558 <line:42:9, col:42>
| |   | `-VarDecl 0x5b5515b86200 <col:9, col:41> col:14 user_auto_var 'UserEntity':'UserEntity' cinit
| |   |   `-ExprWithCleanups 0x5b5515b86540 <col:30, col:41> 'UserEntity':'UserEntity'
| |   |     `-CXXConstructExpr 0x5b5515b86510 <col:30, col:41> 'UserEntity':'UserEntity' 'void (UserEntity &&) noexcept' elidable
| |   |       `-MaterializeTemporaryExpr 0x5b5515b86480 <col:30, col:41> 'UserEntity' xvalue
| |   |         `-CXXTemporaryObjectExpr 0x5b5515b86278 <col:30, col:41> 'UserEntity' 'void () noexcept' zeroing
| |   `-DeclStmt 0x5b5515b876e0 <line:43:9, col:44>
| |     `-VarDecl 0x5b5515b865b0 <col:9, col:43> col:14 user_auto_ptr 'UserEntity *':'UserEntity *' cinit
| |       `-CXXNewExpr 0x5b5515b875b8 <col:28, col:43> 'UserEntity *' Function 0x5b5515b86670 'operator new' 'void *(unsigned long)'
| |         `-CXXConstructExpr 0x5b5515b87590 <col:32, col:43> 'UserEntity' 'void () noexcept' zeroing
| |-CXXMethodDecl 0x5b5515b801b8 <line:46:5, line:50:5> line:46:10 voidDemo2 'void (UserEntity)' implicit-inline
| | |-ParmVarDecl 0x5b5515b800f8 <col:20, col:31> col:31 userEntity 'UserEntity'
| | `-CompoundStmt 0x5b5515b87770 <col:42, line:50:5>
| |   `-IfStmt 0x5b5515b87750 <line:47:9, line:49:9>
| |     |-CXXBoolLiteralExpr 0x5b5515b87718 <line:47:12> 'bool' true
| |     `-CompoundStmt 0x5b5515b87738 <col:17, line:49:9>
| |       `-ReturnStmt 0x5b5515b87728 <line:48:13>
| `-CXXConstructorDecl 0x5b5515b87e08 <line:11:7> col:7 implicit constexpr MyClass 'void (const MyClass &)' inline default trivial noexcept-unevaluated 0x5b5515b87e08
|   `-ParmVarDecl 0x5b5515b87f18 <col:7> col:7 'const MyClass &'
|-FunctionDecl 0x5b5515b86670 <<invalid sloc>> <invalid sloc> implicit used operator new 'void *(unsigned long)'
| |-ParmVarDecl 0x5b5515b86fd0 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| |-VisibilityAttr 0x5b5515b86710 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x5b5515b87040 <<invalid sloc>> Implicit
| `-AllocSizeAttr 0x5b5515b87068 <<invalid sloc>> Implicit 1
|-FunctionDecl 0x5b5515b87098 <<invalid sloc>> <invalid sloc> implicit operator new[] 'void *(unsigned long)'
| |-ParmVarDecl 0x5b5515b87190 <<invalid sloc>> <invalid sloc> implicit 'unsigned long'
| |-VisibilityAttr 0x5b5515b87138 <<invalid sloc>> Implicit Default
| |-ReturnsNonNullAttr 0x5b5515b87200 <<invalid sloc>> Implicit
| `-AllocSizeAttr 0x5b5515b87228 <<invalid sloc>> Implicit 1
|-FunctionDecl 0x5b5515b872c0 <<invalid sloc>> <invalid sloc> implicit used operator delete 'void (void *) noexcept'
| |-ParmVarDecl 0x5b5515b873b8 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x5b5515b87360 <<invalid sloc>> Implicit Default
|-FunctionDecl 0x5b5515b87428 <<invalid sloc>> <invalid sloc> implicit operator delete[] 'void (void *) noexcept'
| |-ParmVarDecl 0x5b5515b87520 <<invalid sloc>> <invalid sloc> implicit 'void *'
| `-VisibilityAttr 0x5b5515b874c8 <<invalid sloc>> Implicit Default
|-VarDecl 0x5b5515b877c0 parent 0x5b5515b61360 prev 0x5b5515b61548 <line:56:1, col:19> col:14 ZERO 'int' cinit
| `-IntegerLiteral 0x5b5515b87878 <col:19> 'int' 0
|-FunctionDecl 0x5b5515b87910 <line:58:1, line:62:1> line:58:6 voidDemo3 'void ()'
| `-CompoundStmt 0x5b5515b87ae8 <col:17, line:62:1>
|   |-DeclStmt 0x5b5515b87a98 <line:59:5, col:12>
|   | `-VarDecl 0x5b5515b87a10 <col:5, col:11> col:9 used k 'int' cinit
|   |   `-IntegerLiteral 0x5b5515b87a78 <col:11> 'int' 0
|   `-UnaryOperator 0x5b5515b87ad0 <line:60:5, col:6> 'int' postfix '++'
|     `-DeclRefExpr 0x5b5515b87ab0 <col:5> 'int' lvalue Var 0x5b5515b87a10 'k' 'int'
`-FunctionDecl 0x5b5515b87cb0 <line:63:1, line:74:1> line:63:5 main 'int (int, char **)'
  |-ParmVarDecl 0x5b5515b87b20 <col:10, col:14> col:14 argc 'int'
  |-ParmVarDecl 0x5b5515b87bd0 <col:20, col:27> col:27 argv 'char **'
  `-CompoundStmt 0x5b5515b89670 <col:32, line:74:1>
    |-DeclStmt 0x5b5515b890e8 <line:64:5, col:23>
    | `-VarDecl 0x5b5515b87d70 <col:5, col:13> col:13 varMyClass 'MyClass' callinit destroyed
    |   `-CXXConstructExpr 0x5b5515b890c0 <col:13> 'MyClass' 'void ()'
    |-DeclStmt 0x5b5515b891f8 <line:65:5, col:22>
    | `-VarDecl 0x5b5515b89110 <col:5, col:18> col:18 used pnt1 'Point' static callinit
    |   `-CXXConstructExpr 0x5b5515b89178 <col:18> 'Point' 'void () noexcept'
    |-DeclStmt 0x5b5515b89320 <line:66:5, col:22>
    | `-VarDecl 0x5b5515b89260 <col:5, col:18> col:18 used pnt2 'struct Point':'Point' callinit
    |   `-CXXConstructExpr 0x5b5515b892f8 <col:18> 'struct Point':'Point' 'void () noexcept'
    |-CompoundStmt 0x5b5515b89618 <line:67:5, line:71:5>
    | |-DeclStmt 0x5b5515b89428 <line:68:9, col:34>
    | | `-VarDecl 0x5b5515b89360 <col:9, col:30> col:24 ptr1 'struct Point *' cinit
    | |   `-UnaryOperator 0x5b5515b893e8 <col:29, col:30> 'Point *' prefix '&' cannot overflow
    | |     `-DeclRefExpr 0x5b5515b893c8 <col:30> 'Point' lvalue Var 0x5b5515b89110 'pnt1' 'Point'
    | |-DeclStmt 0x5b5515b89538 <line:69:9, col:34>
    | | `-VarDecl 0x5b5515b89468 <col:9, col:30> col:24 ptr2 'struct Point *' cinit
    | |   `-UnaryOperator 0x5b5515b894f0 <col:29, col:30> 'struct Point *' prefix '&' cannot overflow
    | |     `-DeclRefExpr 0x5b5515b894d0 <col:30> 'struct Point':'Point' lvalue Var 0x5b5515b89260 'pnt2' 'struct Point':'Point'
    | `-DeclStmt 0x5b5515b89600 <line:70:9, col:26>
    |   `-VarDecl 0x5b5515b89570 <col:9, col:22> col:22 pnt3 'struct Point':'Point' callinit
    |     `-CXXConstructExpr 0x5b5515b895d8 <col:22> 'struct Point':'Point' 'void () noexcept'
    `-ReturnStmt 0x5b5515b89660 <line:73:5, col:12>
      `-IntegerLiteral 0x5b5515b89640 <col:12> 'int' 0
