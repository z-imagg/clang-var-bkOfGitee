TranslationUnitDecl 0x6331e5dff6c8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x6331e5dfff30 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x6331e5dffc90 '__int128'
|-TypedefDecl 0x6331e5dfffa0 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x6331e5dffcb0 'unsigned __int128'
|-TypedefDecl 0x6331e5e00318 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x6331e5e00090 '__NSConstantString_tag'
|   `-CXXRecord 0x6331e5dffff8 '__NSConstantString_tag'
|-TypedefDecl 0x6331e5e003b0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x6331e5e00370 'char *'
|   `-BuiltinType 0x6331e5dff770 'char'
|-TypedefDecl 0x6331e5e455a8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x6331e5e45550 '__va_list_tag[1]' 1 
|   `-RecordType 0x6331e5e004a0 '__va_list_tag'
|     `-CXXRecord 0x6331e5e00408 '__va_list_tag'
|-TypedefDecl 0x6331e5e45618 <./MyClz.h:7:1, col:16> col:16 DOUBLE_typedef 'double'
| `-BuiltinType 0x6331e5dff8f0 'double'
|-CXXRecordDecl 0x6331e5e45670 <line:9:1, line:12:1> line:9:8 referenced struct Point definition
| |-DefinitionData pass_in_registers aggregate standard_layout trivially_copyable pod trivial literal
| | |-DefaultConstructor exists trivial
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial needs_implicit
| |-CXXRecordDecl 0x6331e5e45788 <col:1, col:8> col:8 implicit struct Point
| |-FieldDecl 0x6331e5e45830 <line:10:5, col:11> col:11 referenced x 'float'
| |-FieldDecl 0x6331e5e45898 <line:11:5, col:12> col:12 referenced y 'double'
| |-CXXConstructorDecl 0x6331e5e685b0 <line:9:8> col:8 implicit used Point 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x6331e5e68a08 <col:8>
| |-CXXConstructorDecl 0x6331e5e686b8 <col:8> col:8 implicit constexpr Point 'void (const Point &)' inline default trivial noexcept-unevaluated 0x6331e5e686b8
| | `-ParmVarDecl 0x6331e5e687c8 <col:8> col:8 'const Point &'
| `-CXXConstructorDecl 0x6331e5e68878 <col:8> col:8 implicit constexpr Point 'void (Point &&)' inline default trivial noexcept-unevaluated 0x6331e5e68878
|   `-ParmVarDecl 0x6331e5e68988 <col:8> col:8 'Point &&'
|-NamespaceDecl 0x6331e5e45900 <line:14:1, line:63:1> line:14:11 my_nsp
| |-CXXRecordDecl 0x6331e5e45970 <line:16:5, col:22> col:11 referenced class UserEntity definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | | |-MoveConstructor exists simple trivial
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | |-CXXRecordDecl 0x6331e5e45a88 <col:5, col:11> col:11 implicit class UserEntity
| | |-CXXConstructorDecl 0x6331e5e65920 <col:11> col:11 implicit used constexpr UserEntity 'void () noexcept' inline default trivial
| | | `-CompoundStmt 0x6331e5e65d78 <col:11>
| | |-CXXConstructorDecl 0x6331e5e65a28 <col:11> col:11 implicit constexpr UserEntity 'void (const my_nsp::UserEntity &)' inline default trivial noexcept-unevaluated 0x6331e5e65a28
| | | `-ParmVarDecl 0x6331e5e65b38 <col:11> col:11 'const my_nsp::UserEntity &'
| | `-CXXConstructorDecl 0x6331e5e65be8 <col:11> col:11 implicit constexpr UserEntity 'void (my_nsp::UserEntity &&)' inline default trivial noexcept-unevaluated 0x6331e5e65be8
| |   `-ParmVarDecl 0x6331e5e65cf8 <col:11> col:11 'my_nsp::UserEntity &&'
| |-CXXRecordDecl 0x6331e5e45b30 <line:17:5, col:25> col:11 class ScoreRelation definition
| | |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr
| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveConstructor exists simple trivial needs_implicit
| | | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | | |-MoveAssignment exists simple trivial needs_implicit
| | | `-Destructor simple irrelevant trivial needs_implicit
| | `-CXXRecordDecl 0x6331e5e45c48 <col:5, col:11> col:11 implicit class ScoreRelation
| `-CXXRecordDecl 0x6331e5e45cf0 <line:19:1, line:61:1> line:19:7 class MyClass definition
|   |-DefinitionData standard_layout has_user_declared_ctor can_const_default_init
|   | |-DefaultConstructor exists non_trivial user_provided
|   | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveConstructor
|   | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
|   | |-MoveAssignment
|   | `-Destructor non_trivial user_declared
|   |-CXXRecordDecl 0x6331e5e45e08 <col:1, col:7> col:7 implicit referenced class MyClass
|   |-AccessSpecDecl 0x6331e5e45e98 <line:20:1, col:7> col:1 public
|   |-VarDecl 0x6331e5e45ed8 <line:21:5, col:16> col:16 ZERO 'int' static
|   |-AccessSpecDecl 0x6331e5e45f40 <line:22:1, col:7> col:1 public
|   |-FieldDecl 0x6331e5e45f80 <line:23:5, col:12> col:12 m_d1 'double'
|   |-FieldDecl 0x6331e5e45fe8 <line:24:5, col:9> col:9 m_n2 'int'
|   |-CXXMethodDecl 0x6331e5e460b8 <line:26:5, col:20> col:10 ff1 'void ()' implicit-inline
|   | `-CompoundStmt 0x6331e5e65440 <col:16, col:20>
|   |-CXXConstructorDecl 0x6331e5e46190 <line:27:5, col:16> col:5 MyClass 'void ()' implicit-inline
|   | `-CompoundStmt 0x6331e5e65450 <col:15, col:16>
|   |-CXXConstructorDecl 0x6331e5e463a8 <line:29:5, line:33:5> line:29:5 MyClass 'void (float, int)' implicit-inline
|   | |-ParmVarDecl 0x6331e5e46250 <col:13, col:19> col:19 used f1 'float'
|   | |-ParmVarDecl 0x6331e5e462d0 <col:23, col:27> col:27 used n1 'int'
|   | |-CXXCtorInitializer Field 0x6331e5e45f80 'm_d1' 'double'
|   | | `-ImplicitCastExpr 0x6331e5e654b8 <line:30:19> 'double' <FloatingCast>
|   | |   `-ImplicitCastExpr 0x6331e5e654a0 <col:19> 'float' <LValueToRValue>
|   | |     `-DeclRefExpr 0x6331e5e65460 <col:19> 'float' lvalue ParmVar 0x6331e5e46250 'f1' 'float'
|   | |-CXXCtorInitializer Field 0x6331e5e45fe8 'm_n2' 'int'
|   | | `-ImplicitCastExpr 0x6331e5e65530 <col:28> 'int' <LValueToRValue>
|   | |   `-DeclRefExpr 0x6331e5e654f0 <col:28> 'int' lvalue ParmVar 0x6331e5e462d0 'n1' 'int'
|   | `-CompoundStmt 0x6331e5e65698 <line:31:5, line:33:5>
|   |   `-DeclStmt 0x6331e5e65680 <line:32:9, col:21>
|   |     `-VarDecl 0x6331e5e65588 <col:9, col:19> col:14 c3 'char' cinit
|   |       `-ImplicitCastExpr 0x6331e5e65668 <col:17, col:19> 'char' <IntegralCast>
|   |         `-BinaryOperator 0x6331e5e65648 <col:17, col:19> 'int' '+'
|   |           |-IntegerLiteral 0x6331e5e655f0 <col:17> 'int' 1
|   |           `-ImplicitCastExpr 0x6331e5e65630 <col:19> 'int' <LValueToRValue>
|   |             `-DeclRefExpr 0x6331e5e65610 <col:19> 'int' lvalue ParmVar 0x6331e5e462d0 'n1' 'int'
|   |-CXXDestructorDecl 0x6331e5e64fd0 <line:35:5, line:48:5> line:35:5 ~MyClass 'void () noexcept' implicit-inline
|   | `-CompoundStmt 0x6331e5e6cb20 <col:15, line:48:5>
|   |   |-DeclStmt 0x6331e5e65878 <line:36:9, col:18>
|   |   | |-VarDecl 0x6331e5e656f0 <col:9, col:13> col:13 x 'int'
|   |   | |-VarDecl 0x6331e5e65770 <col:9, col:15> col:15 y 'int'
|   |   | `-VarDecl 0x6331e5e657f0 <col:9, col:17> col:17 z 'int'
|   |   |-DeclStmt 0x6331e5e65ea0 <line:37:9, col:30>
|   |   | `-VarDecl 0x6331e5e658a0 <col:9, col:20> col:20 userEntity 'my_nsp::UserEntity' callinit
|   |   |   `-CXXConstructExpr 0x6331e5e65e78 <col:20> 'my_nsp::UserEntity' 'void () noexcept'
|   |   |-DeclStmt 0x6331e5e68b40 <line:39:9, col:21>
|   |   | `-VarDecl 0x6331e5e65ec8 <col:9, col:15> col:15 used point0 'Point' callinit
|   |   |   `-CXXConstructExpr 0x6331e5e68b18 <col:15> 'Point' 'void () noexcept'
|   |   |-DeclStmt 0x6331e5e6c9a8 <line:40:9, line:45:10>
|   |   | `-VarDecl 0x6331e5e68bd0 <line:40:9, line:45:9> line:40:14 used fn_point '(lambda at ./MyClz.h:40:25)':'(lambda at ./MyClz.h:40:25)' cinit
|   |   |   `-ExprWithCleanups 0x6331e5e6c990 <col:25, line:45:9> '(lambda at ./MyClz.h:40:25)':'(lambda at ./MyClz.h:40:25)'
|   |   |     `-CXXConstructExpr 0x6331e5e6c960 <line:40:25, line:45:9> '(lambda at ./MyClz.h:40:25)':'(lambda at ./MyClz.h:40:25)' 'void ((lambda at ./MyClz.h:40:25) &&) noexcept' elidable
|   |   |       `-MaterializeTemporaryExpr 0x6331e5e6c7e8 <line:40:25, line:45:9> '(lambda at ./MyClz.h:40:25)' xvalue
|   |   |         `-LambdaExpr 0x6331e5e6c260 <line:40:25, line:45:9> '(lambda at ./MyClz.h:40:25)'
|   |   |           |-CXXRecordDecl 0x6331e5e68d38 <line:40:25> col:25 implicit class definition
|   |   |           | |-DefinitionData lambda pass_in_registers empty standard_layout trivially_copyable can_const_default_init
|   |   |           | | |-DefaultConstructor defaulted_is_constexpr
|   |   |           | | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
|   |   |           | | |-MoveConstructor exists simple trivial
|   |   |           | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param
|   |   |           | | |-MoveAssignment
|   |   |           | | `-Destructor simple irrelevant trivial
|   |   |           | |-CXXMethodDecl 0x6331e5e68e80 <col:46, line:45:9> line:40:25 used operator() 'double (const Point &) const' inline
|   |   |           | | |-ParmVarDecl 0x6331e5e68c48 <col:28, col:41> col:41 used point 'const Point &'
|   |   |           | | `-CompoundStmt 0x6331e5e693f0 <col:48, line:45:9>
|   |   |           | |   `-IfStmt 0x6331e5e693c0 <line:41:13, line:44:24> has_else
|   |   |           | |     |-BinaryOperator 0x6331e5e69020 <line:41:16, col:30> 'bool' '>'
|   |   |           | |     | |-ImplicitCastExpr 0x6331e5e69008 <col:16, col:22> 'double' <FloatingCast>
|   |   |           | |     | | `-ImplicitCastExpr 0x6331e5e68fd8 <col:16, col:22> 'float' <LValueToRValue>
|   |   |           | |     | |   `-MemberExpr 0x6331e5e68f58 <col:16, col:22> 'const float' lvalue .x 0x6331e5e45830
|   |   |           | |     | |     `-DeclRefExpr 0x6331e5e68f38 <col:16> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |           | |     | `-ImplicitCastExpr 0x6331e5e68ff0 <col:24, col:30> 'double' <LValueToRValue>
|   |   |           | |     |   `-MemberExpr 0x6331e5e68fa8 <col:24, col:30> 'const double' lvalue .y 0x6331e5e45898
|   |   |           | |     |     `-DeclRefExpr 0x6331e5e68f88 <col:24> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |           | |     |-ReturnStmt 0x6331e5e692c0 <line:42:17, col:38>
|   |   |           | |     | `-BinaryOperator 0x6331e5e69128 <col:24, col:38> 'double' '+'
|   |   |           | |     |   |-ImplicitCastExpr 0x6331e5e69110 <col:24, col:30> 'double' <FloatingCast>
|   |   |           | |     |   | `-ImplicitCastExpr 0x6331e5e690e0 <col:24, col:30> 'float' <LValueToRValue>
|   |   |           | |     |   |   `-MemberExpr 0x6331e5e69060 <col:24, col:30> 'const float' lvalue .x 0x6331e5e45830
|   |   |           | |     |   |     `-DeclRefExpr 0x6331e5e69040 <col:24> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |           | |     |   `-ImplicitCastExpr 0x6331e5e690f8 <col:32, col:38> 'double' <LValueToRValue>
|   |   |           | |     |     `-MemberExpr 0x6331e5e690b0 <col:32, col:38> 'const double' lvalue .y 0x6331e5e45898
|   |   |           | |     |       `-DeclRefExpr 0x6331e5e69090 <col:32> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |           | |     `-ReturnStmt 0x6331e5e693b0 <line:44:17, col:24>
|   |   |           | |       `-FloatingLiteral 0x6331e5e692d0 <col:24> 'double' 1.000000e-01
|   |   |           | |-CXXConversionDecl 0x6331e5e6c0f0 <line:40:25, line:45:9> line:40:25 implicit operator double (*)(const Point &) 'double (*() const noexcept)(const Point &)' inline
|   |   |           | |-CXXMethodDecl 0x6331e5e6c1a0 <col:25, line:45:9> line:40:25 implicit __invoke 'double (const Point &)' static inline
|   |   |           | | `-ParmVarDecl 0x6331e5e6c088 <col:28, col:41> col:41 point 'const Point &'
|   |   |           | |-CXXDestructorDecl 0x6331e5e6c288 <col:25> col:25 implicit referenced ~ 'void () noexcept' inline default trivial
|   |   |           | |-CXXConstructorDecl 0x6331e5e6c4a0 <col:25> col:25 implicit constexpr  'void (const (lambda at ./MyClz.h:40:25) &)' inline default trivial noexcept-unevaluated 0x6331e5e6c4a0
|   |   |           | | `-ParmVarDecl 0x6331e5e6c5b8 <col:25> col:25 'const (lambda at ./MyClz.h:40:25) &'
|   |   |           | `-CXXConstructorDecl 0x6331e5e6c658 <col:25> col:25 implicit used constexpr  'void ((lambda at ./MyClz.h:40:25) &&) noexcept' inline default trivial
|   |   |           |   |-ParmVarDecl 0x6331e5e6c768 <col:25> col:25 '(lambda at ./MyClz.h:40:25) &&'
|   |   |           |   `-CompoundStmt 0x6331e5e6c950 <col:25>
|   |   |           `-CompoundStmt 0x6331e5e693f0 <col:48, line:45:9>
|   |   |             `-IfStmt 0x6331e5e693c0 <line:41:13, line:44:24> has_else
|   |   |               |-BinaryOperator 0x6331e5e69020 <line:41:16, col:30> 'bool' '>'
|   |   |               | |-ImplicitCastExpr 0x6331e5e69008 <col:16, col:22> 'double' <FloatingCast>
|   |   |               | | `-ImplicitCastExpr 0x6331e5e68fd8 <col:16, col:22> 'float' <LValueToRValue>
|   |   |               | |   `-MemberExpr 0x6331e5e68f58 <col:16, col:22> 'const float' lvalue .x 0x6331e5e45830
|   |   |               | |     `-DeclRefExpr 0x6331e5e68f38 <col:16> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |               | `-ImplicitCastExpr 0x6331e5e68ff0 <col:24, col:30> 'double' <LValueToRValue>
|   |   |               |   `-MemberExpr 0x6331e5e68fa8 <col:24, col:30> 'const double' lvalue .y 0x6331e5e45898
|   |   |               |     `-DeclRefExpr 0x6331e5e68f88 <col:24> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |               |-ReturnStmt 0x6331e5e692c0 <line:42:17, col:38>
|   |   |               | `-BinaryOperator 0x6331e5e69128 <col:24, col:38> 'double' '+'
|   |   |               |   |-ImplicitCastExpr 0x6331e5e69110 <col:24, col:30> 'double' <FloatingCast>
|   |   |               |   | `-ImplicitCastExpr 0x6331e5e690e0 <col:24, col:30> 'float' <LValueToRValue>
|   |   |               |   |   `-MemberExpr 0x6331e5e69060 <col:24, col:30> 'const float' lvalue .x 0x6331e5e45830
|   |   |               |   |     `-DeclRefExpr 0x6331e5e69040 <col:24> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |               |   `-ImplicitCastExpr 0x6331e5e690f8 <col:32, col:38> 'double' <LValueToRValue>
|   |   |               |     `-MemberExpr 0x6331e5e690b0 <col:32, col:38> 'const double' lvalue .y 0x6331e5e45898
|   |   |               |       `-DeclRefExpr 0x6331e5e69090 <col:32> 'const Point' lvalue ParmVar 0x6331e5e68c48 'point' 'const Point &'
|   |   |               `-ReturnStmt 0x6331e5e693b0 <line:44:17, col:24>
|   |   |                 `-FloatingLiteral 0x6331e5e692d0 <col:24> 'double' 1.000000e-01
|   |   `-CXXOperatorCallExpr 0x6331e5e6cae8 <line:47:9, col:24> 'double':'double' '()'
|   |     |-ImplicitCastExpr 0x6331e5e6ca78 <col:17, col:24> 'double (*)(const Point &) const' <FunctionToPointerDecay>
|   |     | `-DeclRefExpr 0x6331e5e6ca00 <col:17, col:24> 'double (const Point &) const' lvalue CXXMethod 0x6331e5e68e80 'operator()' 'double (const Point &) const'
|   |     |-ImplicitCastExpr 0x6331e5e6cab8 <col:9> 'const (lambda at ./MyClz.h:40:25)' lvalue <NoOp>
|   |     | `-DeclRefExpr 0x6331e5e6c9c0 <col:9> '(lambda at ./MyClz.h:40:25)':'(lambda at ./MyClz.h:40:25)' lvalue Var 0x6331e5e68bd0 'fn_point' '(lambda at ./MyClz.h:40:25)':'(lambda at ./MyClz.h:40:25)'
|   |     `-ImplicitCastExpr 0x6331e5e6cad0 <col:18> 'const Point' lvalue <NoOp>
|   |       `-DeclRefExpr 0x6331e5e6c9e0 <col:18> 'Point' lvalue Var 0x6331e5e65ec8 'point0' 'Point'
|   |-CXXMethodDecl 0x6331e5e65218 <line:50:5, line:51:5> line:50:10 voidDemo 'void (int, short)' implicit-inline
|   | |-ParmVarDecl 0x6331e5e650c8 <col:19, col:23> col:23 cnt 'int'
|   | |-ParmVarDecl 0x6331e5e65148 <col:28, col:34> col:34 chr 'short'
|   | `-CompoundStmt 0x6331e5e6cba0 <col:38, line:51:5>
|   `-CXXMethodDecl 0x6331e5e65398 <line:53:5, line:57:5> line:53:10 voidDemo2 'void (my_nsp::UserEntity)' implicit-inline
|     |-ParmVarDecl 0x6331e5e652d8 <col:20, col:31> col:31 userEntity 'my_nsp::UserEntity'
|     `-CompoundStmt 0x6331e5e6cc08 <col:42, line:57:5>
|       `-IfStmt 0x6331e5e6cbe8 <line:54:9, line:56:9>
|         |-CXXBoolLiteralExpr 0x6331e5e6cbb0 <line:54:12> 'bool' true
|         `-CompoundStmt 0x6331e5e6cbd0 <col:17, line:56:9>
|           `-ReturnStmt 0x6331e5e6cbc0 <line:55:13>
`-NamespaceDecl 0x6331e5e6cc20 prev 0x6331e5e45900 <./MyClz.cpp:4:1, line:15:1> line:4:11 my_nsp
  |-original Namespace 0x6331e5e45900 'my_nsp'
  |-VarDecl 0x6331e5e6ccc8 parent 0x6331e5e45cf0 prev 0x6331e5e45ed8 <line:6:5, col:23> col:18 ZERO 'int' cinit
  | `-IntegerLiteral 0x6331e5e6cd80 <col:23> 'int' 0
  `-FunctionDecl 0x6331e5e6ce18 <line:8:5, line:12:5> line:8:10 voidDemo3 'void ()'
    `-CompoundStmt 0x6331e5e6cfa8 <col:21, line:12:5>
      |-DeclStmt 0x6331e5e6cf58 <line:9:7, col:14>
      | `-VarDecl 0x6331e5e6ced0 <col:7, col:13> col:11 used k 'int' cinit
      |   `-IntegerLiteral 0x6331e5e6cf38 <col:13> 'int' 0
      `-UnaryOperator 0x6331e5e6cf90 <line:10:7, col:8> 'int' postfix '++'
        `-DeclRefExpr 0x6331e5e6cf70 <col:7> 'int' lvalue Var 0x6331e5e6ced0 'k' 'int'
