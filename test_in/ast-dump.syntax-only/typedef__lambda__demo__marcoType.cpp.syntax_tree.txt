TranslationUnitDecl 0x6382905c08b8 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x6382905c1120 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x6382905c0e80 '__int128'
|-TypedefDecl 0x6382905c1190 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x6382905c0ea0 'unsigned __int128'
|-TypedefDecl 0x6382905c1508 <<invalid sloc>> <invalid sloc> implicit __NSConstantString '__NSConstantString_tag'
| `-RecordType 0x6382905c1280 '__NSConstantString_tag'
|   `-CXXRecord 0x6382905c11e8 '__NSConstantString_tag'
|-TypedefDecl 0x6382905c15a0 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x6382905c1560 'char *'
|   `-BuiltinType 0x6382905c0960 'char'
|-TypedefDecl 0x638290606778 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list '__va_list_tag[1]'
| `-ConstantArrayType 0x638290606720 '__va_list_tag[1]' 1 
|   `-RecordType 0x6382905c1690 '__va_list_tag'
|     `-CXXRecord 0x6382905c15f8 '__va_list_tag'
|-CXXRecordDecl 0x6382906067d0 <./typedef__lambda__demo__marcoType.cpp:1:1, col:13> col:7 referenced class User definition
| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init
| | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr
| | |-CopyConstructor simple trivial has_const_param implicit_has_const_param
| | |-MoveConstructor exists simple trivial
| | |-CopyAssignment simple trivial has_const_param needs_implicit implicit_has_const_param
| | |-MoveAssignment exists simple trivial needs_implicit
| | `-Destructor simple irrelevant trivial
| |-CXXRecordDecl 0x6382906068e8 <col:1, col:7> col:7 implicit class User
| |-CXXConstructorDecl 0x638290606c98 <col:7> col:7 implicit used constexpr User 'void () noexcept' inline default trivial
| | `-CompoundStmt 0x638290607118 <col:7>
| |-CXXConstructorDecl 0x638290606d98 <col:7> col:7 implicit used constexpr User 'void (const User &) noexcept' inline default trivial
| | |-ParmVarDecl 0x638290606ea8 <col:7> col:7 'const User &'
| | `-CompoundStmt 0x6382906261d0 <col:7>
| |-CXXConstructorDecl 0x638290606f58 <col:7> col:7 implicit constexpr User 'void (User &&)' inline default trivial noexcept-unevaluated 0x638290606f58
| | `-ParmVarDecl 0x638290607068 <col:7> col:7 'User &&'
| `-CXXDestructorDecl 0x6382906071b0 <col:7> col:7 implicit referenced ~User 'void () noexcept' inline default trivial
`-FunctionDecl 0x6382906069d8 <line:3:1, line:8:1> line:3:6 func_demo_ForEach 'void ()'
  `-CompoundStmt 0x638290626320 <col:25, line:8:1>
    |-DeclStmt 0x638290607290 <line:4:3, col:14>
    | `-VarDecl 0x638290606c18 <col:3, col:13> col:8 used arr 'User[4]' callinit
    |   `-CXXConstructExpr 0x638290607188 <col:8> 'User[4]' 'void () noexcept'
    `-CXXForRangeStmt 0x638290626210 <line:5:3, line:7:3>
      |-<<<NULL>>>
      |-DeclStmt 0x638290607690 <line:5:14>
      | `-VarDecl 0x638290607400 <col:14> col:14 implicit used __range1 'User (&)[4]' cinit
      |   `-DeclRefExpr 0x6382906072a8 <col:14> 'User[4]' lvalue Var 0x638290606c18 'arr' 'User[4]'
      |-DeclStmt 0x638290626040 <col:13>
      | `-VarDecl 0x638290625d10 <col:13> col:13 implicit used __begin1 'User *':'User *' cinit
      |   `-ImplicitCastExpr 0x638290625f10 <col:13> 'User *' <ArrayToPointerDecay>
      |     `-DeclRefExpr 0x6382906076a8 <col:13> 'User[4]' lvalue Var 0x638290607400 '__range1' 'User (&)[4]'
      |-DeclStmt 0x638290626058 <col:13>
      | `-VarDecl 0x638290625db8 <col:13, col:14> col:13 implicit used __end1 'User *':'User *' cinit
      |   `-BinaryOperator 0x638290625f60 <col:13, col:14> 'User *' '+'
      |     |-ImplicitCastExpr 0x638290625f48 <col:13> 'User *' <ArrayToPointerDecay>
      |     | `-DeclRefExpr 0x6382906076c8 <col:13> 'User[4]' lvalue Var 0x638290607400 '__range1' 'User (&)[4]'
      |     `-IntegerLiteral 0x638290625f28 <col:14> 'long' 4
      |-BinaryOperator 0x6382906260e0 <col:13> 'bool' '!='
      | |-ImplicitCastExpr 0x6382906260b0 <col:13> 'User *':'User *' <LValueToRValue>
      | | `-DeclRefExpr 0x638290626070 <col:13> 'User *':'User *' lvalue Var 0x638290625d10 '__begin1' 'User *':'User *'
      | `-ImplicitCastExpr 0x6382906260c8 <col:13> 'User *':'User *' <LValueToRValue>
      |   `-DeclRefExpr 0x638290626090 <col:13> 'User *':'User *' lvalue Var 0x638290625db8 '__end1' 'User *':'User *'
      |-UnaryOperator 0x638290626120 <col:13> 'User *':'User *' lvalue prefix '++'
      | `-DeclRefExpr 0x638290626100 <col:13> 'User *':'User *' lvalue Var 0x638290625d10 '__begin1' 'User *':'User *'
      |-DeclStmt 0x638290607340 <col:7, col:17>
      | `-VarDecl 0x6382906072d8 <col:7, col:13> col:12 x 'User' cinit
      |   `-CXXConstructExpr 0x6382906261e0 <col:13> 'User' 'void (const User &) noexcept'
      |     `-ImplicitCastExpr 0x638290626188 <col:13> 'const User' lvalue <NoOp>
      |       `-UnaryOperator 0x638290626170 <col:13> 'User' lvalue prefix '*' cannot overflow
      |         `-ImplicitCastExpr 0x638290626158 <col:13> 'User *':'User *' <LValueToRValue>
      |           `-DeclRefExpr 0x638290626138 <col:13> 'User *':'User *' lvalue Var 0x638290625d10 '__begin1' 'User *':'User *'
      `-CompoundStmt 0x638290626308 <col:18, line:7:3>
        `-DeclStmt 0x6382906262f0 <line:6:5, col:12>
          `-VarDecl 0x638290626288 <col:5, col:9> col:9 kkk 'int'
